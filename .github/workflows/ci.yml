name: CI Checks

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
      - name: Clone This Repo
        uses: actions/checkout@v2
      - name: Build
        run: |
          sudo apt-get install -y lcov
          cmake -S test -B build/ \
          -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_CLONE_SUBMODULES=ON \
          -DCMAKE_C_FLAGS='--coverage -Wall -Wextra -Werror -DNDEBUG'
          make -C build/ all
      - name: Test
        run: |
          cd build/
          ctest -E system --output-on-failure
          cd ..
      - name: Check Coverage
        env:
          MIN_COVERAGE: 100
        run: |
          make -C build/ coverage
          declare -a EXCLUDE=("\*test\*" "*CMakeCCompilerId*" "*mocks*" "**/*test*")
          for i in "${EXCLUDE[@]}"
          do
            echo $i
          done
          echo ${EXCLUDE[@]} | xargs lcov --rc lcov_branch_coverage=1 -r build/coverage.info -o build/coverage.info
          lcov --rc lcov_branch_coverage=1 --list build/coverage.info
          CUR_COVERAGE=$(lcov --rc lcov_branch_coverage=1 --list build/coverage.info | sed -n "s/.*Total:|.*|\([^%]*\)%.*/\1/p")
          echo "Minumum Coverage Required: ${MIN_COVERAGE}%"
          echo "Current Code Coverage: ${CUR_COVERAGE}%"
          if (( $(echo "$CUR_COVERAGE < $MIN_COVERAGE" | bc) )); then exit 1; fi
  complexity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: sudo apt-get install complexity
      - name: Complexity
        run: |
          find source/ -iname '*.c' |\
          xargs complexity --scores --threshold=0 --horrid-threshold=8
  doxygen:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Doxygen
        run: |
          wget -qO- "http://doxygen.nl/files/doxygen-1.8.20.linux.bin.tar.gz" | sudo tar --strip-components=1 -xz -C /usr/local
          sudo apt-get install -y libclang-9-dev
      - name: Run Doxygen And Verify Stdout Is Empty
        run: |
          doxygen docs/doxygen/config.doxyfile 2>&1 | tee doxyoutput.txt
          if [[ "$(wc -c < doxyoutput.txt | bc)" = "0" ]]; then exit 0; else exit 1; fi
  spell-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Parent Repo
        uses: actions/checkout@v2
        with:
          ref: master
          repository: aws/aws-iot-device-sdk-embedded-C
      - run: rm -r libraries/standard/coreMQTT
      - name: Clone This Repo
        uses: actions/checkout@v2
        with:
          path: libraries/standard/coreMQTT
      - name: Install spell
        run: |
          sudo apt-get install spell
          sudo apt-get install util-linux
      - name: Check spelling
        run: |
          PATH=$PATH:$PWD/tools/spell
          for lexfile in `find libraries/standard/coreMQTT -name lexicon.txt`
          do dir=${lexfile%/lexicon.txt}
            echo $dir
            find-unknown-comment-words --directory $dir
            if [ $? -ne "0" ]
            then
              exit 1
            fi
          done
  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Uncrustify
        run: sudo apt-get install uncrustify
      - name: Run Uncrustify
        run: find . -iname "*.[hc]" -exec uncrustify --check -c tools/uncrustify.cfg {} +
      - name: Check For Trailing Whitespace
        run: |
          set +e
          grep --exclude="README.md" -rnI -e "[[:blank:]]$" .
          if [ "$?" = "0" ]; then
            echo "Files have trailing whitespace."
            exit 1
          else
            exit 0
          fi
