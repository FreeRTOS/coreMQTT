name: CI Checks

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
      - name: Clone This Repo
        uses: actions/checkout@v2
      - name: Build
        run: |
          sudo apt-get install -y lcov
          cmake -S test -B build/ \
          -G "Unix Makefiles" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_FLAGS='--coverage -Wall -Wextra -Werror -DNDEBUG'
          make -C build/ all
      - name: Test
        run: |
          cd build/
          ctest -E system --output-on-failure
          cd ..
      - name: Coverage
        run: |
          make -C build/ coverage
          lcov --rc lcov_branch_coverage=1 --remove build/coverage.info '*test*' --output-file build/coverage.info
          lcov --rc lcov_branch_coverage=1 --remove build/coverage.info '*CMakeCCompilerId*' --output-file build/coverage.info
          lcov --rc lcov_branch_coverage=1 --remove build/coverage.info '*mocks*' --output-file build/coverage.info
          lcov --list build/coverage.info
      - name: lcov-cop
        uses: ChicagoFlutter/lcov-cop@v1.0.2
        with:
          path: "build/coverage.info"
          min_coverage: 99
          exclude: "**/*test*"
  complexity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup
        run: sudo apt-get install complexity
      - name: Complexity
        run: |
          find source/ -iname '*.c' |\
          xargs complexity --scores --threshold=0 --horrid-threshold=8
  doxygen:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Doxygen
        run: |
          wget -qO- "http://doxygen.nl/files/doxygen-1.8.20.linux.bin.tar.gz" | sudo tar --strip-components=1 -xz -C /usr/local
          sudo apt-get install -y libclang-9-dev
      - name: Run Doxygen And Verify Stdout Is Empty
        run: |
          doxygen docs/doxygen/config.doxyfile 2>&1 | tee doxyoutput.txt
          if [[ "$(wc -c < doxyoutput.txt | bc)" = "0" ]]; then exit 0; else exit 1; fi
  spell-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Parent Repo
        uses: actions/checkout@v2
        with:
          ref: master
          repository: aws/aws-iot-device-sdk-embedded-C
      - run: rm -r libraries/standard/coreMQTT
      - name: Clone This Repo
        uses: actions/checkout@v2
        with:
          path: libraries/standard/coreMQTT
      - name: Install spell
        run: |
          sudo apt-get install spell
          sudo apt-get install util-linux
      - name: Check spelling
        run: |
          PATH=$PATH:$PWD/tools/spell
          for lexfile in `find libraries/standard/coreMQTT -name lexicon.txt`
          do dir=${lexfile%/lexicon.txt}
            echo $dir
            find-unknown-comment-words --directory $dir
            if [ $? -ne "0" ]
            then
              exit 1
            fi
          done
  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Uncrustify
        run: sudo apt-get install uncrustify
      - name: Run Uncrustify
        run: find . -iname "*.[hc]" -exec uncrustify --check -c tools/uncrustify.cfg {} +
      - name: Check For Trailing Whitespace
        run: |
          set +e
          grep --exclude="README.md" -rnI -e "[[:blank:]]$" .
          if [ "$?" = "0" ]; then
            echo "Files have trailing whitespace."
            exit 1
          else
            exit 0
          fi

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'vtest' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip -r test-asset.zip source
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./test-asset.zip
          asset_name: test-asset.zip
          asset_content_type: application/zip
